var tipuesearch = {"pages": [{
    "title": "petBook",
    "text": "Content Link Demo Stacks 담당 기능 🔎 About 　　　　　　소외된 동물들을 위한 집사들의 커뮤니티 &amp; 포털 사이트 　　　　　　　　　　   주변의 소동물 친구찾기, 소동물 펫시팅 노하우, 　　　　　　　　　　  주변 소동물이 이용가능한 병원정보, 분양정보 등을 제공 하는 플랫폼 📅 프로젝트 기간 　　  2021/02/20 ~ 진행중 　 👨🏽‍🤝‍👨🏻 팀원　　　　　　　 총원 8, BE 4, FE 5 　 💡 담당 Stack 　　　　 Front-End 🏢 활동 소속　　　　   PSG Content petBook 은 강아지, 고양이 를 제외한 소외된 반려동물들을 위한 공간입니다. 소동물 들을 키우시는 분들이 사이트에서 유용한 정보를 같이 공유하고 이야기 하며, 주변의 소동물이 진료 받을수 있는 동물 병원, 분양 정보를 제공 하려고 합니다. 협업 프로젝트 관리는 Jira 와 깃헙 프로젝트 를 통해 관리하고 있습니다. 추후 권한 설정이 되면 Figma 링크를 첨부하도록 하겠습니다. Link FE Code (github) 협업을 위한 프로세스 및 React 개발환경 set ( feat. yarn 3.x &amp; TDD ) - (1) Demo 준비중 Stacks 　　　　　　　　　　　 Framework : React(FE) Spring Boot(BE) Node.js(Dev Server) Library : React-Query Redux Redux-thunk Redux-saga Axios @testing-library enzyme styled-components @mui Package : Yarn 3 PnP webpack Babel Main Language : Javascript Typescript 담당 기능 yarn 3.x PnP + CRA + Typescript + Redux + Jest 를 이용한 개발환경 CI 작업 병원 정보 page 구현 예정",
    "tags": "project",
    "url": "/project/2022-02-20-petBook/"
  },{
    "title": "OceanVue",
    "text": "Content Link Demo Stacks 담당 기능 (Full-Stack) 개발당시 느낀점들 🔎 About 　　　　　　ZUM 과제전형을 하며 제작한 커스텀 바닐라 JS 프레임워크 게시판 입니다 　 📅 프로젝트 기간 　　  2021/01/17 ~ 2021/02/14 　 👨🏽‍🤝‍👨🏻 팀원　　　　　　　 개인 프로젝트 　 💡 담당 Stack 　　　　 VanilaJS Hash Routing Flux Pattern VirtualDOM Fetch API DIFF Algorithm API Cashing None DB Webpack Babel Node.js Rest API Content ZUM 1차 과제 전형을 하며 제작한 커스텀 프레임워크 입니다. React와 Redux를 모티브로 제작하였습니다. 직접 개발한 커스텀 프레임워크로 간단한 게시판이 구현되어 있습니다. Link Code (github) Demo Zum-Board Stacks Backend : Node.js API Cashing Rest API Frontend : VanilaJS Component Hash Routing Flux Pattern VirtualDOM DIFF Algorithm Fetch API API Cashing Package : Yarn Webpack Babel Database : JSON File Server Hosting : Heroku Github Pages 담당 기능 (Full-Stack) Backend : Node.js None-DB REST API, CRUD Server Data 저장은 JSON 파일에 저장. API 캐싱 적용 OceanVue (Vanila JS Custom Framework) (사실 React에 더 가까우나 yoonOcean에 맞는 별칭을 지어주고 싶었습니다 😅) React 와 Redux 를 모티브로 프레임워크를 제작 Fetch API 를 통한 서버 연동 Hash 방식 SPA Routing esm 모듈 적용 babel 을 통해 jsx 문법을 적용시켜 가상 DOM 생성 가상 DOM 을 통한 렌더링 새로운 가상 DOM 이 렌더링 될시 변경된 부분만 렌더링 (DIFF 알고리즘 적용) 단방향 데이터 흐름 Flux Pattern 형식의 상태 관리 부분적으로 이벤트 위임을 사용하여 이벤트 처리 Core 인 Component 정의 에서는 생성자 함수와 prototype 메서드를 통한 entry 에 종속적인 구조. webpack 을 통한 js 파일과 css 파일 번들링, build 를 통한 index.html 에서 bundle.js 파일 하나로 실행됩니다. Frontend : 게시판 Zum-Board 구현 페이지네이션, 작성일 기준 오름/내림차순, 작성자 클릭시 해당 작성자 기준, 검색 기능 등의 정렬 필터링 구현. 페이지 이동간 새로고침 발생하지 않고, routes 배열에 등록된 컴포넌트 실행. 실제 DOM 렌더링후 컴포넌트들 재실행을 통해 엘리먼트 취득 및 이벤트 리스너 추가 useEffect 와 비슷하게 엘리먼트가 마운트 된후 작동하는 hook 구현 store 에서 상태 변화를 감지하면 자동으로 렌더링 되도록 구현 서버 데이터 API 캐싱 적용하여 스택에 저장되고 store에 들어가도록 구현 POST, DELETE, UPDATE API 및 새로고침 버튼 클릭시 데이터 갱신 수정, 새글 작성하기 완료후 자동으로 작성한 게시물로 이동 404 에러에 대해 UI 처리, 500 에러등은 alert 으로 에러메시지 띄우기 개발당시 느낀점들 구현할게 너무나도 많고, 처음 해보는 내용이 많아서 많은 공을 들여 진행했던 프로젝트 입니다.. 힘든만큼 얻어가는 내용이 많았던 과제 전형이었습니다. 특히 webpack 과 babel 의 역할을 정확히 알지 못했었는데, 이번 기회를 통해 무슨 역할을 하는지 정확히 알수 있었습니다. 또한 Core 를 구현할때는 타인 코드를 참고하면서 할수 밖에 없었는데요, 참고한 내용을 저에게 맞게 변형시키는 작업을 하면서 이렇게 생각할수도 있구나 하는 경험을 많이 얻었던것 같습니다. 백엔드를 직접 간단하게 구상하고, 이를 Fetch API 를 통해 가져오는 작업을 하면서도 서버와 클라이언트간 HTTP 통신 이해도도 많이 늘었다고 생각합니다. 게시물 정렬 작업 (필터링) 할때는 직접 알고리즘을 구상한것이 많았는데, 특히 페이지네이션 기능구현할때는 2차원 배열로 구현했던게 인상깊게 기억이 납니다. 저의 역량이 많이 늘어나는 과제였던것 같습니다. 닫기",
    "tags": "project",
    "url": "/project/2022-02-14-Ocean-Vue/"
  },{
    "title": "Hyades - PSG 팀 공식 홈페이지",
    "text": "Content Link Demo Stacks 담당 기능 🔎 About 　　　　　　PSG 팀 의 공식 홈페이지 　　　　　　　　　　  진행중인 프로젝트 와 PSG 팀원을 소개 　　　　　　　　　　  추후 깃헙 API 와 연동하여 노션과 같은 프로젝트 관리 기능을 도입할 예정 📅 프로젝트 기간 　　  2021/02/06 ~ 진행중 　 👨🏽‍🤝‍👨🏻 팀원　　　　　　　 총원 9, BE 5, FE 4 　 💡 담당 Stack 　　　　 Front-End Team Reader 🏢 활동 소속　　　　   PSG Content 팀 프로젝트 스터디 그룹 PSG 를 소개하는 공식 홈페이지 입니다. 현재 진행중인 프로젝트와 그룹내 팀원을 소개하는 사이트를 제작하려고 하고있으며, 추후 깃헙 이슈, 프로젝트 같은 API 와 연동하여 프로젝트 관리 기능을 도입할 예정입니다. 자세한 내용에 관심이 생기셨다면 노션 링크를 확인해주시기 바랍니다. 협업 프로젝트 관리는 노션 로드맵, 깃헙 프로젝트 를 통해 관리하고 있습니다. Link FE Code (github) 협업을 위한 프로세스 및 React 개발환경 set ( feat. yarn 3.x &amp; TDD ) - (1) Demo 준비중 Stacks 　　　　　　　　　　　 Framework : React(FE) Spring Boot(BE) Node.js(Dev Server) Library : React-Query Redux Redux-thunk Redux-saga Axios @testing-library enzyme styled-components @mui Package : Yarn 3 PnP webpack Babel Main Language : Javascript Typescript 담당 기능 현재 프론트엔드 팀장 역할을 수행하고 있으며, 매 스프린트 마다 팀원 분들께 담당할 에픽과 태스크를 분배해 드리고 있습니다. 주로 저는 공통 컴포넌트나 로그인 같은 전역적인 상태관리 로직을 작성할 계획입니다. yarn 3.x PnP + CRA + Typescript + Redux + Jest 를 이용한 개발환경 CI 작업 로그인 기능, 공통 컴포넌트, 마이페이지 구현 개발 예정",
    "tags": "project",
    "url": "/project/2022-02-06-Hyades/"
  },{
    "title": "Place n Piece (보류)",
    "text": "toc 🔎 About 　　　　　　실제 장소(카페, 전망 좋은 위치 등)를 Web-App 으로 구현하여 가상 장소를 제공 　　　　　　　　　　 하고 그날의 기분, 일기, 방명록, 유저 커뮤니케이션 등의 컨텐츠를 제공하여 가상 　　　　　　　　　　 장소를 실제로 방문한듯한 User Experience 를 서비스 하는 메타버스 플랫폼 　 📅 프로젝트 기간 　　  2021/01/11 ~ 진행중 　 👨🏽‍🤝‍👨🏻 팀원　　　　　　　 개인 프로젝트, 추후 팀원 모집 계획중 　 💡 담당 Stack 　　　　 React Redux 🏢 활동 소속　　　　   프로젝트인원 모집 계획중 Content 현재 개발중에 있으며, 빠른 시일내에 Example Project 형태로 배포할 계획입니다. User Communication 형성과 좋은 User Experience 를 경험하도록 개발하고 싶습니다. 리액트를 다루는 기술 ( 김민준 / velopert 저 ) 에서 만드는 Blog Project 에서 나만의 프로젝트로 특색있게 만들고자 생각 하다가 떠오른 아이디어 에서 출발한 프로젝트 입니다. 자세한 기획 내용에 관심이 생기셨다면 노션 링크를 확인해주시기 바랍니다. 또한 가능한 선에서 최신 기법으로 개발하려고 노력하고 있습니다. Link Code (github) 노션 Demo 준비중 Stacks Framework : React(FE) Node.js(BE) Library : Redux(Saga) @emotion/react Babel Axios Koa mongoose bcrypt JWT Package : Yarn webpack Database : MongoDB Server Hosting : AWS EC2 Main Language : Javascript 담당 기능 (Full-Stack) CSS-in-JS (@emotion/react) 를 이용하여 작업 높은 재사용성 Component 설계 시맨틱한 마크업, 반응형 UI 를 위함 Component (UI, Container, Redux) 비동기 작업 처리 (Redux-Saga, Axios) 가능한한 UX 에 초점을 맞춘 front-end 개발 도입 예정 Stack 퍼블리싱 및 UI 관련 전반적인 기술 (미디어 쿼리, SEO, 크로스 브라우징) 대형 트래픽 솔루션 (immer, memo, SSR…) React@v18 업그레이드 예정인 Suspense 사용예정 Typescript 사용 Rest API 설계 및 백엔드 와의 데이터 HTTP 통신 집중적으로 연구 개발",
    "tags": "project",
    "url": "/project/2022-01-11-Place-n-Piece/"
  },{
    "title": "개인 포트폴리오 사이트 with Jekyll-Theme",
    "text": "Link Stacks 개발당시 느낀점들 🔎 About 　　　　　　지킬 테마를 사용한 Github Pages 포트폴리오 사이트 입니다. 　 📅 프로젝트 기간 　　  2021/12/20 ~ 2021/12/29 　 👨🏽‍🤝‍👨🏻 팀원　　　　　　　 개인 사이드 프로젝트 　 💡 사용 Stack 　　　　 ruby jekyll-theme Github-Pages 🏢 활동 소속　　　　  PROJECT LION 의 면접관이 좋아하는 Git Portfolio 만들기 　　　　　　　　　　 (with_GitBlog) 강의 이 사이트 는 저의 소개 및 개발 History 등을 남기는 공간 입니다. 프론트사이드 만 개발하여 백엔드가 없는 정적 웹사이트 입니다. utterances 를 통하여 깃허브에 로그인을 하면 댓글을 작성할수 있습니다. 게시물들은 마크다운 파일로 작성합니다. Link Code (github) CHANGELOG Stacks API : utterances Hits Google Analtics Package : bundler jekyll sass SEO 개발당시 느낀점들 Ruby 기반의 프론트사이드 사이트를 처음 접해봤습니다. jekyll 테마를 사용해서 사이트를 빠르게 구축할수 있었습니다. 또한 다양한 플러그인 들이 지원되서, 페이지에 부가기능 또한 빠르게 개발할수 있었습니다. utterances, Hits, Google Analtics 등 외부 API 와 연결하는 작업도 좋은 경험 이었습니다. 모든 게시물을 마크다운 으로 작성하다보니, 마크다운 작성 능력도 올릴수 있었습니다. 계속 운영하면서 사이트의 인터랙티브함을 좀더 업그레이드 하며 다른 스택을 접목할 계획입니다.",
    "tags": "project",
    "url": "/project/2021-12-29-Github-Pages-PF/"
  },{
    "title": "웹디자인기능사",
    "text": "Content Link Demo Stacks 개발당시 느낀점들 🔎 About 　　　　　　 HTML, CSS, jQuery 로 이루어진 퍼블리싱 역량을 확인하는 시험입니다. 　 📅 프로젝트 기간 　　  2021/10/22 ~ 2021/12/13 　 👨🏽‍🤝‍👨🏻 팀원　　　　　　　 개인 자격증 시험 　 💡 사용 Stack 　　　　 HTML5 CSS3 jQuery Content 웹디자인 기능사 실기 준비시 공개문제를 연습했던 프로젝트들 입니다. Link Code (github) Demo 준비중 Stacks Library : jQuery 개발당시 느낀점들 퍼블리싱에 대한 이해도가 전혀 없었을때 공부했던 내용입니다. 시험을 준비하면서 html 요소나 css 스타일링을 해보면서 퍼블리싱 숙련도를 올렸습니다. 또한 jQuery를 다루면서 dom 을 쉽게 접근해서 동적인 페이지를 제작할수 있었습니다. 저에게는 프론트엔드에 입문하게 해준 첫 프로젝트 라고 할수 있습니다. 닫기",
    "tags": "project",
    "url": "/project/2021-12-13-Web-Design-Crafter/"
  },{
    "title": "Relog",
    "text": "Content Link Demo Stacks 담당 기능 (Full-Stack) 개발당시 느낀점들 🔎 About 　　　　　　블로그 서비스 　 📅 프로젝트 기간 　　  2021/11/3 ~ 2021/11/29 　 👨🏽‍🤝‍👨🏻 팀원　　　　　　　 Full-Stack 1명, Front-End 1명 　 💡 담당 Stack 　　　　 React Redux Node.js Koa RestAPI AWS EC2 🏢 활동 소속　　　　  안산 이젠아카데미 (국비지원) Content 국비지원 수업 을 들으며 수강 종료하기전 프로젝트 제출때 만든 블로그 사이트 입니다. Relog 는 게시물에 집중할수 있는 심플한 뷰 가 특징인 블로그 입니다. 기본적으로 메인 페이지에서 유저들이 작성한 포스트들을 보고, 해시태그가 같은 게시물이 존재하면 해당 태그의 게시물을 모아서 볼수 있으며, 누구나 쉽게 가입할수 있습니다. 유저들은 가입시 관리자의 승인을 받아야 글을 작성할수 있습니다. Link Code (github) Relog 사이트 Demo 위의 Relog 사이트 링크로 이동하셔서 사이트 이용이 가능합니다. 사이트 관리자인 admin 과 몇개의 test 유저가 있습니다. 관리자 ID : admin PW : 123456 test 유저1 ID : steven PW : 1234 test 유저2 ID : yoon PW : 1234 사이트 관리자는 클라이언트의 새 글쓰기 승인 기능만 있습니다. Stacks Framework : React(FE) Node.js(BE) Library : Redux(Saga) Styled-Componets M-UI Babel Axios Koa mongoose bcrypt JWT Package : Yarn webpack Database : MongoDB Server Hosting : AWS EC2 담당 기능 (Full-Stack) 백엔드 RestAPI 설계 Axios 로 RestAPI 연동하여 Front &lt;-&gt; Back 데이터 연동 Redux 로 state 처리 및 Redux-Saga 이용한 비동기 작업처리 전달 받은 state 사용하여 container component 에서 마운트 처리 DOM 조작 및 UI 핸들링 어색한 UI 스타일링 조정 관리자 페이지 UI, State 처리, 유저정보 호출 AWS-EC2 nginx 와 PM2 로 배포 개발당시 느낀점들 프론트엔드 개발을 처음 시작해봤었던 프로젝트 입니다 바닐라 JS 나 다른 프레임워크 등의 작업을 해보지 않고 리액트로 첫 시작을 했습니다. 개발 당시 부딪히는 점이 많아서 대부분 책의 내용을 참고하였는데요 (리액트를 다루는 기술(개정판) / 김민준(velopert) 저) 오히려 Start를 리액트로 시작해서 프론트엔드가 추구하는 방향이 무엇인지 깨닫는 프로젝트 였습니다. 좀더 빠른 렌더링, 사용자 친화적인 UI, 클라이언트의 입력부터 서버의 출력까지의 데이터 관리에 대해 이해할수 있었습니다. 또한 책에서 안내하는 블로그 사이트의 기초적인 뼈대를 작성한후 관리자 페이지를 직접 개발해 보았습니다. 현재는 단순하게 프론트엔드 에서 관리자가 승인시 state 로만 허가되어 페이지를 나가거나 창을 새로고침 (F5) 를 하게되면 승인 정보가 사라지게 됩니다. 추후 DB에 POST해서 승인정보를 GET 할수 있도록 개발할 예정입니다. 또한 다양한 API를 연동해볼 생각입니다. 닫기",
    "tags": "project",
    "url": "/project/2021-11-29-Relog/"
  },{
    "title": "News-Viewer with React",
    "text": "Content Link Demo Stacks 개발당시 느낀점들 🔎 About 　　　　　　리액트로 개발한 News를 불러오고 볼수있는 어플리케이션 입니다. 　 📅 프로젝트 기간 　　  2021/10/30 ~ 2021/11/2 　 👨🏽‍🤝‍👨🏻 팀원　　　　　　　 개인 사이드 프로젝트 　 💡 사용 Stack 　　　　 React react-router-dom Axios Custom-Hooks Styled-Componets Content News-Viewer 는 뉴스 API 를 받아와 렌더링하는 어플리케이션 입니다. 기본적으로 메인 페이지에서 카테고리에 상관없이 전체보기 로 뉴스를 보고, 카테고리에 따라 관련 기사들을 볼수 있으며, 기사를 클릭하면 해당 기사를 발행한 신문사 사이트로 이동합니다. Link Code (github) Demo 준비중 (newsapi.org 의 가격정책이 바뀐 이유로 브라우저로 바로 호출 할수 없게 됐습니다.) Stacks Framework : React(FE) Library : Styled-Componets Axios Custom Component react-router-dom Package : Yarn webpack 개발당시 느낀점들 외부 API 를 가져와 사용하는것을 처음 해본 프로젝트 입니다. JSON 형태로 뉴스 정보를 받아와서 UI를 구성하고 데이터를 출력하는 형태입니다. API 호출 뿐만 아니라, router 와 호출시 발생하는 지연을 처리하는 비동기 상태관리에 대해서도 이해도를 높일수 있었습니다. 또한 주된 작업은 이런 데이터를 받아와서 렌더링 하는것임을 파악 할 수 있던 사이드 프로젝트 였습니다. 닫기",
    "tags": "project",
    "url": "/project/2021-11-04-News-Viewer/"
  },{
    "title": "Todo-App with React",
    "text": "Content Link Demo Stacks 개발당시 느낀점들 🔎 About 　　　　　　리액트로 개발한 일정 관리 어플리케이션 입니다. 　 📅 프로젝트 기간 　　  2021/10/26 ~ 2021/10/28 　 👨🏽‍🤝‍👨🏻 팀원　　　　　　　 개인 사이드 프로젝트 　 💡 사용 Stack 　　　　 React react-router-dom Axios Custom-Hooks Styled-Componets Content Todo-App 은 일정을 추가하고, 체크하고, 삭제할수 있는 어플리케이션 입니다. Link Code (github) Demo Todo-App Stacks Framework : React(FE) Package : Yarn webpack scss Hooks React.memo react-virtualized 개발당시 느낀점들 리액트 를 사용해 처음 해본 프로젝트 입니다. Item-List 형태의 어플리케이션으로 구조화 되어있습니다. map, useReducer, useCallback, 이벤트 핸들러 등으로 이루어져 있는데, 이와같은 방법을 실습해볼수 있던 사이드 프로젝트 였습니다. 또한 대량의 데이터를 프론트에서 다루게 될때 어떤식으로 접근해야 하는가 파악할수 있던 프로젝트 였습니다. 닫기",
    "tags": "project",
    "url": "/project/2021-10-28-Todo-App/"
  },{
    "title": "K-HUMS 국방과제",
    "text": "Content Stacks 담당 기능 (Full-Stack) 개발당시 느낀점들 🔎 About 　　　　　　근무기간 동안 참여한 KHUMS 국가과제 입니다. 　 📅 프로젝트 기간 　　  2021/02/03 ~ 2020/4/30 　 👨🏽‍🤝‍👨🏻 팀원　　　　　　　프로젝트 총괄 1명, FPGA 코딩 및 하드웨어 1명 　 💡 담당 Stack 　　　　 FPGA Platform Designer NIOS II C Driver 🏢 활동 소속　　　　  네오헬스테크널러지 (NHT) Content 위 이미지는 실제 프로젝트 참여 이미지가 아닌 참고용 이미지 임을 알립니다. KHUMS 국가과제는 헬기에 탑재되는 항공기상태감시시스템 ( HUMS ) 국산화 프로젝트 입니다. HUMS 에 들어가는 SRU 중, DPU 와 APU 개발 파트 였습니다. DPU 는 디지털 신호처리를, APU 는 아날로그 신호 처리를 담당합니다. 자세한 내용은 국방과제 이므로 비공개 보안 사항 입니다. Stacks FPGA : Cyclone V OS : NIOS II SRAM DDR3 Flash Memory ADC PCIe RS485 SPI Shift Register 담당 기능 (Full-Stack) MCU 의 역할을 할수 있도록 FPGA 를 설계. (Main Board, Core) FPGA 에서 NIOS II가 구동될수 있도록 Platform Designer 설계 각 하드웨어 들이 작동하는지 NIOS 및 Quartus 상에서 디버깅, 검증 잘못된 회로나 FPGA Pin Assignment 검증 개발당시 느낀점들 졸업 하기 2주전쯤 입사하고, 입사 하자마자 바로 투입됐던 프로젝트 입니다. 개발에 바로 투입되기에는 실력이 많이 모자랐지만, 실무에 참여해보고 싶었던 참이라 공부 해가며 개발했었습니다. ASIC 용 칩 설계에만 사용되는줄 알았던 FPGA 로 MCU와 같은 역할을 하도록 설계 하는 업무가 주됬었습니다. Memory 칩 들을 Assign 하는 작업이나, ADC 칩을 Spec 에 맞게 Assign 하는 작업들을 하면서 컴퓨터 구조에 대해 좀더 깊이 이해하게 되었고, 이를 가상 OS인 NIOS 에 올려 MCU 로써 작동하는 것을 경험 했습니다. NIOS 에서 C 언어로 된 펌웨어 코드들을 보면서 구조를 파악하는데 시간을 많이 들였는데, 생각보다 훨씬 깊고 C 로 구조화 된 펌웨어를 처음 봐서 많이 헤맸던 기억이 납니다. 당시 프로젝트를 진행하기엔 실력이 너무 부족했고, 이런것들을 배울기회는 너무 적고 혼자 공부하고있던 입장이었는데, 현재의 웹 개발 시장처럼 정보공유 문화가 부족한 분야라고 많이 느꼇습니다. 그래서 퇴사후 웹 개발을 시작하게된 계기가 됐습니다. 닫기",
    "tags": "project",
    "url": "/project/2021-04-30-K-HUMS-DAPU/"
  },{
    "title": "RasberryPi-Drone",
    "text": "Content Link Record Stacks 담당 기능 (Full-Stack) 개발당시 느낀점들 🔎 About 　　　　　　졸업작품 발표시 진행한 라즈베리파이를 활용한 드론설계 프로젝트 입니다. 　 📅 프로젝트 기간 　　  2021/1/30 ~ 2020/12/20 　 👨🏽‍🤝‍👨🏻 팀원　　　　　　　개발 및 설계 1명, 설계 및 문서작업 1명 　 💡 담당 Stack 　　　　 디지털 회로 설계 드론 비행 설계 펌웨어 설계 C 🏢 활동 소속　　　　  청주대학교 Content 졸업작품 발표를 준비하며 설계했던 라즈베리파이를 활용한 드론설계 프로젝트 입니다. 라즈베리파이는 각각 Controller MCU 부, 드론의 MCU 역할을 하는 FCC MCU 부에 들어갑니다. 라즈베리파이 두대는 서로 블루투스로 통신하며 조이스틱을 조작하면 컨트롤러는 FCC로 각각 해당하는 신호를 전송합니다. throttle up,down 과 비상정지, Rolling과 Pitching을 제어할수있도록 설계했습니다. Link Code (github) Record Stacks 디지털 회로 설계 : Drone 구동부 컨트롤러 구동부 전자 회로 설계 : Drone 전원부 컨트롤러 전원 펌웨어 설계 : RasberryPi FCC(Drone) Controller DriverCode(BNO_055) DriverCode(MCP_3008) DriverCode(BLHeli-32) Library : WiringPi pigpio WiringPiI2C wiringPiSPI bluetooth rfcomm socket 담당 기능 (Full-Stack) 드론 비행 원리와 그에 맞는 출력을 낼수있는 추력설계, 비행설계(Pitching, Rolling, Yawing) 각 모듈들과 MCU 처럼 사용하는 RasberryPi 간 DriverCode 설계, 디지털 회로 설계 각 DriverCode 를 이용해 RasberryPi 에서 C언어로 펌웨어 설계 ESC PWM, SPI 통신, I2C 통신, Serial 통신, Parallel 통신, 블루투스 소켓통신 펌웨어 설계 전원부 전압 강하 및 전류 안정 회로 설계 개발당시 느낀점들 제가 코딩을 해서 프로젝트 라는것을 처음 진행해본 프로젝트 였습니다. 당시 배우던 전공인 전자회로와 마이크로프로세서 에서 배운 전공지식을 가지고 시작했습니다. 하지만 막상 시작하니 모르는게 정말많아 필요한 공부량이 정말 많았던 프로젝트 였습니다. C언어 조차 제대로 모르는 상황에서, 라즈베리파이를 접하고, 드론의 비행원리를 공부해가며, 여러가지 통신과 드라이버코드, 디지털 신호제어등을 하나씩 개발해 나갔습니다. 아무런 뼈대없이 맨땅에 헤딩을 했던 프로젝트로 저에게 큰 터닝포인트가 됐던 프로젝트입니다. 결국 시제품과 비슷할 정도로 매끄러운 동작도, 제대로된 비행도 못한채로 끝났지만, 펌웨어 실력향상이나 개발 역량이 크게 늘어나는 시점이 되었다고 생각합니다. 이제 와서 생각해보는 것 이지만, 좀더 쉬운 방법이나 가이드라인을 따라 개발했다면.. 하는 생각을 하게됩니다. 아쉬움이 많이 남았었습니다. 다음에 꼭 다시 완성시켜보고 싶습니다. 닫기",
    "tags": "project",
    "url": "/project/2020-12-20-Raspi-Drone/"
  }]};
